#!/usr/bin/env python

import json
import time
from datetime import datetime

import requests

WEATHER_CODES = {
    '113': '☀️',
    '116': '⛅️',
    '119': '☁️',
    '122': '☁️',
    '143': '🌫',
    '176': '🌦',
    '179': '🌧',
    '182': '🌧',
    '185': '🌧',
    '200': '⛈',
    '227': '🌨',
    '230': '❄️',
    '248': '🌫',
    '260': '🌫',
    '263': '🌦',
    '266': '🌦',
    '281': '🌧',
    '284': '🌧',
    '293': '🌦',
    '296': '🌦',
    '299': '🌧',
    '302': '🌧',
    '305': '🌧',
    '308': '🌧',
    '311': '🌧',
    '314': '🌧',
    '317': '🌧',
    '320': '🌨',
    '323': '🌨',
    '326': '🌨',
    '329': '❄️',
    '332': '❄️',
    '335': '❄️',
    '338': '❄️',
    '350': '🌧',
    '353': '🌦',
    '356': '🌧',
    '359': '🌧',
    '362': '🌧',
    '365': '🌧',
    '368': '🌨',
    '371': '❄️',
    '374': '🌧',
    '377': '🌧',
    '386': '⛈',
    '389': '🌩',
    '392': '⛈',
    '395': '❄️'
}

data = {}

weather_url = f"https://wttr.in/Csömör?format=j1"
weather = requests.get(weather_url).json()

def format_time(time):
    return time.replace("00", "").zfill(2)

def format_chances(hour):
    chances = {
        "chanceoffog": "🌫",
        "chanceoffrost": "❄️",
        "chanceofovercast": "🌦",
        "chanceofrain": "🌧",
        "chanceofsnow": "🌨",
        "chanceofsunshine": "☀️",
        "chanceofthunder": "⛈",
        "chanceofwindy": "💨"
    }

    conditions = []
    for event in chances.keys():
        if int(hour[event]) > 0:
            conditions.append(f"{chances[event]}  {hour[event]}%")
    return ", ".join(conditions)

current_weather = weather['current_condition'][0]
current_weather_desc = current_weather['weatherDesc'][0]['value']
temperature = current_weather['FeelsLikeC']
if temperature == "-0":
    temperature = "0"

data['text'] = f"{WEATHER_CODES[current_weather['weatherCode']]} {temperature}°C ({current_weather_desc})"

data['tooltip'] = f"""<b>{weather['nearest_area'][0]['areaName'][0]['value']}, {weather['nearest_area'][0]['country'][0]['value']}</b>
{current_weather['temp_C']}°C {current_weather_desc}
Feels like: {current_weather['FeelsLikeC']}°C
Wind: {current_weather['windspeedKmph']} km/h
Humidity: {current_weather['humidity']}%
"""

for i, day in enumerate(weather['weather']):
    maxtemp, mintemp = day['maxtempC'], day['mintempC']
    sunrise, sunset = day['astronomy'][0]['sunrise'], day['astronomy'][0]['sunset']
    date = ''
    if i == 0:
        date += "Today, "
    if i == 1:
        date += "Tomorrow, "

    data['tooltip'] += f"""
<b>{date}{day['date']}</b>
⬆️ {f'{maxtemp:0>2}'}° ⬇️ {f'{mintemp:0>2}'}° 🌅 {sunrise} 🌇 {sunset}
"""
    
    for hour in day['hourly']:
        if i == 0 and int(format_time(hour['time'])) < datetime.now().hour - 2:
            continue
        feelsLike = hour['FeelsLikeC']
        data['tooltip'] += f"{format_time(hour['time'])}:00 {WEATHER_CODES[hour['weatherCode']]} {f'{feelsLike:0>2}°C'} <b>{hour['weatherDesc'][0]['value']}</b> {format_chances(hour)}\n"

print(json.dumps(data))